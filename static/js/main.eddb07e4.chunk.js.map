{"version":3,"sources":["api/chat-api.ts","Components/Chat/components/InputMessageChat/InputMessageChat.tsx","Components/Chat/components/Message/Message.tsx","Components/Chat/components/MessagesBoard/MessagesBoard.tsx","selectors/ChatSelectors.ts","Components/Chat/components/MessagesBoard/MessagesBoardContainer.tsx","Components/Chat/Chat.tsx","Constants/ChatConstants.ts","Redux/actions/chatActions.ts","Redux/reducers/chatReducer.ts","Components/Chat/ChatContainer.tsx","App.tsx","theme.tsx","Redux/reducers/rootReducer.ts","index.tsx"],"names":["clientStomp","useStyles","makeStyles","root","display","flexDirection","alignItems","textField","marginTop","marginBottom","nickname","width","nicknameField","marginRight","InputMessageChat","pushMessage","setNickName","nickName","useState","nick","setNick","message","setMessage","styles","sentMessage","length","className","TextField","variant","label","onChange","e","target","value","Button","color","onClick","disabled","fullWidth","multiline","rows","onKeyPress","key","preventDefault","name","fontWeight","paddingRight","Message","author","memo","borderWidth","borderStyle","borderColor","borderRadius","minHeight","maxHeight","padding","overflowY","MessagesBoard","allMessages","boardRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","map","item","i","getAllMessages","state","chat","MessagesBoardContainer","useSelector","Chat","Paper","Box","p","chatApi","callBack","StompJs","webSocketFactory","SockJS","activate","onConnect","subscribe","JSON","parse","body","data","publish","destination","stringify","deactivate","GET_MESSAGE","getMessage","type","payload","initialState","ChatContainer","dispatch","useDispatch","a","App","Container","maxWidth","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StyledEngineProvider","injectFirst","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.eddb07e4.chunk.js","sourcesContent":["import SockJS from \"sockjs-client\";\r\nimport * as StompJs from \"@stomp/stompjs\";\r\nimport {IAllMessages} from \"../Interfaces\";\r\n\r\nlet clientStomp: StompJs.Client;\r\n\r\nconst sendMessage = (data: IAllMessages) => {\r\n    clientStomp.publish({destination: '/app/message', body: JSON.stringify(data)});\r\n}\r\n\r\nconst createChannel = (callBack: (arg: IAllMessages) => void) => {\r\n    clientStomp = new StompJs.Client();\r\n    // @ts-ignore\r\n    clientStomp.webSocketFactory = () => new SockJS('https://poker-api.r2ls.ru/ws');\r\n    clientStomp.activate();\r\n    clientStomp.onConnect = () => {\r\n        clientStomp.subscribe('/topic/chat', (message) => {\r\n            callBack(JSON.parse(message.body))\r\n        });\r\n    };\r\n}\r\n\r\nconst closeConnection = () => {\r\n    clientStomp.deactivate();\r\n}\r\n\r\nexport const chatApi = {\r\n    start: createChannel,\r\n    sendMessage,\r\n    closeConnection,\r\n}","import React, {FC, useState} from \"react\";\r\nimport {TextField, Button} from '@material-ui/core';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {IInputMessageChat} from \"../../../../Interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-end\"\r\n    },\r\n    textField: {\r\n        marginTop: 16,\r\n        marginBottom: 8\r\n    },\r\n    nickname: {\r\n        display: \"flex\",\r\n        alignItems: \"flex-end\",\r\n        width: \"100%\",\r\n        marginTop: 16,\r\n    },\r\n    nicknameField: {\r\n        marginRight: 8,\r\n    }\r\n});\r\n\r\nconst InputMessageChat: FC<IInputMessageChat> = ({pushMessage, setNickName, nickName}) => {\r\n    const [nick, setNick] = useState<string>('');\r\n    const [message, setMessage] = useState<string>('');\r\n    const styles = useStyles();\r\n\r\n    const sentMessage = () => {\r\n        if (message.length) {\r\n            pushMessage(message)\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    const onChangeMessageHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMessage(e.target.value)\r\n    }\r\n\r\n    const onClickSendHandler = () => {\r\n        sentMessage()\r\n    }\r\n\r\n    const onChangeNickHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNick(e.target.value)\r\n    }\r\n\r\n    const onClickSaveNickHandler = () => {\r\n        setNickName(nick);\r\n    }\r\n\r\n    const handleKeyPress = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            sentMessage()\r\n        }\r\n    }\r\n\r\n    return <div className={styles.root}>\r\n        {!nickName.length && <div className={styles.nickname}>\r\n            <TextField\r\n                variant=\"standard\"\r\n                label=\"Write a nickname\"\r\n                className={styles.nicknameField}\r\n                onChange={onChangeNickHandler}\r\n            />\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={onClickSaveNickHandler}\r\n                disabled={!nick.length}>\r\n                Save\r\n            </Button>\r\n        </div>}\r\n        <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={2}\r\n            label=\"Write a message\"\r\n            className={styles.textField}\r\n            onChange={onChangeMessageHandler}\r\n            value={message}\r\n            onKeyPress={handleKeyPress}\r\n        />\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!nickName.length}\r\n            onClick={onClickSendHandler}>\r\n            Sent\r\n        </Button>\r\n    </div>\r\n}\r\n\r\nexport default InputMessageChat;","import React, {FC, memo} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {IAllMessages} from \"../../../../Interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    message: {\r\n        display: \"flex\",\r\n    },\r\n    name: {\r\n        fontWeight: 500,\r\n        paddingRight: 4\r\n    },\r\n});\r\n\r\nconst Message: FC<IAllMessages> = ({author = 'George', message}) => {\r\n    const styles = useStyles();\r\n\r\n    return <div className={styles.message}>\r\n        <div className={styles.name}>{`${author}:`}</div>\r\n        <div>{message}</div>\r\n    </div>\r\n}\r\n\r\nexport default memo(Message);","import React, {FC, useEffect, useRef} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Message from \"../Message\";\r\nimport {IChatState} from \"../../../../Interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        borderWidth: 1,\r\n        borderStyle: \"solid\",\r\n        borderColor: \"rgba(0, 0, 0, 0.23)\",\r\n        borderRadius: 4,\r\n        minHeight: 200,\r\n        maxHeight: 200,\r\n        padding: 16,\r\n        overflowY: 'auto',\r\n    },\r\n});\r\n\r\nconst MessagesBoard: FC<IChatState> = ({allMessages}) => {\r\n    const boardRef = useRef<HTMLDivElement>(null);\r\n    const styles = useStyles();\r\n\r\n    useEffect(() => {\r\n        if (boardRef.current) {\r\n            boardRef.current.scrollTop = boardRef.current.scrollHeight;\r\n        }\r\n    }, [allMessages])\r\n\r\n    return <div className={styles.root} ref={boardRef}>\r\n        {!!allMessages.length && allMessages.map((item, i) => (\r\n            <Message author={item.author} message={item.message} key={i} />\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport default MessagesBoard;\r\n","// import {createSelector} from \"reselect\";\r\nimport {IChatMessagesState} from \"../Interfaces\";\r\n\r\nexport const getAllMessages = (state: IChatMessagesState) => state.chat.allMessages","import React, {FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {IAllMessages} from \"../../../../Interfaces\";\r\nimport MessagesBoard from \"./MessagesBoard\";\r\nimport {getAllMessages} from \"../../../../selectors/ChatSelectors\";\r\n\r\nconst MessagesBoardContainer: FC = () => {\r\n    const allMessages: IAllMessages[] = useSelector(getAllMessages)\r\n\r\n    return <MessagesBoard allMessages={allMessages}/>\r\n}\r\n\r\nexport default MessagesBoardContainer;\r\n\r\n","import React, {FC} from \"react\";\r\nimport InputMessageChat from \"./components/InputMessageChat\";\r\nimport MessagesBoardContainer from \"./components/MessagesBoard\";\r\nimport {Paper, Box} from '@material-ui/core';\r\nimport { IChat } from \"../../Interfaces\";\r\n\r\nconst Chat: FC<IChat> = ({pushMessage, setNickName, nickName}) => {\r\n    return <Paper>\r\n        <Box p={2}>\r\n            <MessagesBoardContainer />\r\n            <InputMessageChat pushMessage={pushMessage} setNickName={setNickName} nickName={nickName}/>\r\n        </Box>\r\n    </Paper>\r\n}\r\n\r\nexport default Chat;","export const GET_MESSAGE = 'GET_MESSAGE';","import {IAllMessages} from \"../../Interfaces\";\r\nimport {GET_MESSAGE} from \"../../Constants/ChatConstants\";\r\n\r\nexport const getMessage = (data: IAllMessages)  => ({\r\n    type: GET_MESSAGE,\r\n    payload: data\r\n});","import {IChatState, IAllMessages, IAddMessageAction} from \"../../Interfaces\";\r\nimport {GET_MESSAGE} from \"../../Constants/ChatConstants\";\r\nimport {chatApi} from \"../../api/chat-api\";\r\nimport {getMessage} from \"../actions/chatActions\";\r\n\r\nconst initialState: IChatState = {\r\n    allMessages: []\r\n}\r\n\r\nexport const chatReducer = (state = initialState, action: IAddMessageAction): IChatState => {\r\n    switch (action.type) {\r\n        case GET_MESSAGE:\r\n            return {\r\n                allMessages: [...state.allMessages, action.payload]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const starChatting = () => async (dispatch: (arg: { type: string; payload: IAllMessages; }) => void) => {\r\n    chatApi.start((data: IAllMessages) => dispatch(getMessage(data)))\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport Chat from \"./Chat\";\r\nimport {chatApi} from \"../../api/chat-api\";\r\nimport {starChatting} from \"../../Redux/reducers/chatReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst ChatContainer = () => {\r\n    const [nickName, setNickName] = useState<string>(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(starChatting())\r\n        return () => chatApi.closeConnection()\r\n    }, [])\r\n\r\n    const pushMessage = (message: string) => {\r\n        const itemMessages = {\r\n            author: nickName,\r\n            message: message\r\n        }\r\n\r\n        chatApi.sendMessage(itemMessages)\r\n    }\r\n\r\n    return <Chat pushMessage={pushMessage} setNickName={setNickName} nickName={nickName} />\r\n}\r\n\r\nexport default ChatContainer;","import * as React from 'react';\nimport Container from '@material-ui/core/Container';\n\nimport {makeStyles} from '@material-ui/core/styles';\nimport Chat from \"./Components/Chat\";\nimport {Box} from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n    root: {},\n});\n\nconst App = () => {\n    const styles = useStyles();\n\n    return (\n        <Container maxWidth=\"sm\" className={styles.root}>\n            <Box p={2}>\n                <Chat />\n            </Box>\n        </Container>\n    );\n}\n\nexport default App;","import { createMuiTheme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n});\n\nexport default theme;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {chatReducer} from './chatReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    chat: chatReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport StyledEngineProvider from '@material-ui/core/StyledEngineProvider';\nimport {ThemeProvider} from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\nimport {Provider} from 'react-redux';\nimport store from '../src/Redux/reducers/rootReducer';\n\nReactDOM.render(\n    <StyledEngineProvider injectFirst>\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <Provider store={store}>\n                <App />\n            </Provider>,\n        </ThemeProvider>\n    </StyledEngineProvider>,\n    document.querySelector('#root'),\n);"],"sourceRoot":""}