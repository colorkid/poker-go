{"version":3,"sources":["api/websocketApi.ts","Components/InputNameField/InputNameField.tsx","api/task-name-api.ts","selectors/boardSelecors.ts","Components/InputNameField/InputNameFieldContainer.tsx","Components/PokerBoard/PokerBoard.tsx","Constants/boardConstants.ts","Redux/actions/boardActions.ts","Redux/reducers/boardReducer.ts","Components/PokerBoard/PokerBoardContainer.tsx","App.tsx","theme.tsx","Constants/ChatConstants.ts","Redux/reducers/chatReducer.ts","Redux/reducers/rootReducer.ts","index.tsx"],"names":["clientStomp","useStyles","makeStyles","container","padding","fontSize","skeleton","transform","InputNameField","setNameStory","nameStory","subscribedState","useState","title","setTitle","styles","useEffect","Paper","className","TextField","value","label","variant","InputLabelProps","shrink","onChange","e","target","onBlur","Skeleton","width","height","StompJs","webSocketFactory","SockJS","activate","taskNameApi","getMessage","setSubscribedState","onConnect","subscribe","message","JSON","parse","body","data","publish","destination","stringify","getNameStory","state","board","getSubscribedState","subscribed","InputNameFieldContainer","useSelector","header","display","justifyContent","middle","footer","PokerBoard","GET_NAME_STORY","SET_SUBSCRIBE_STATE","type","payload","initialState","PokerBoardContainer","dispatch","useDispatch","a","root","flexDirection","minHeight","App","theme","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","GET_MESSAGE","allMessages","rootReducer","combineReducers","chat","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StyledEngineProvider","injectFirst","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"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","file":"static/js/main.4a848360.chunk.js","sourcesContent":["import SockJS from \"sockjs-client\";\r\nimport * as StompJs from \"@stomp/stompjs\";\r\n\r\nexport let clientStomp: StompJs.Client;\r\nclientStomp = new StompJs.Client();\r\n// @ts-ignore\r\nclientStomp.webSocketFactory = () => new SockJS('https://poker-api.r2ls.ru/ws');\r\nclientStomp.activate();\r\n\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport {Paper, Skeleton} from '@material-ui/core';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {INameField} from \"../../Interfaces\";\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        padding: 8,\r\n\r\n        '& .MuiOutlinedInput-input': {\r\n            fontSize: 22,\r\n        }\r\n    },\r\n    skeleton: {\r\n        transform: 'none'\r\n    }\r\n});\r\n\r\nconst InputNameField: FC<INameField> = ({setNameStory, nameStory, subscribedState}) => {\r\n    const [title, setTitle] = useState('');\r\n    const styles = useStyles();\r\n\r\n    useEffect(() => {\r\n        setTitle(nameStory)\r\n    }, [nameStory])\r\n\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const onBlurHandler = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setNameStory(e.target.value)\r\n    }\r\n\r\n    return <>\r\n        {subscribedState\r\n            ? <Paper className={styles.container}>\r\n                <TextField\r\n                    value={title}\r\n                    label=\"Name of story\"\r\n                    variant=\"outlined\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    onChange={onChangeHandler}\r\n                    onBlur={onBlurHandler}\r\n                />\r\n            </Paper>\r\n            : <Skeleton width={294} height={80} className={styles.skeleton}/>}</>\r\n}\r\n\r\nexport default InputNameField;","import {IApiWebSocket, INameStory} from \"../Interfaces\";\r\nimport {clientStomp} from './websocketApi'\r\nimport {IMessage} from \"@stomp/stompjs\";\r\n\r\nexport const taskNameApi: IApiWebSocket = {\r\n    onSubscribe: (getMessage: (arg: INameStory) => void, setSubscribedState: () => void) => {\r\n        clientStomp.onConnect = () => {\r\n            setSubscribedState()\r\n            clientStomp.subscribe('/topic/room/topic-changed', (message: IMessage) => {\r\n                getMessage(JSON.parse(message.body))\r\n            });\r\n        }\r\n    },\r\n    sendMessage: (data: INameStory) => {\r\n        clientStomp.publish({destination: '/app/room/topic-changed', body: JSON.stringify(data)});\r\n    },\r\n}","// import {createSelector} from \"reselect\";\r\nimport {IBoardTitleState, ISubscribedState} from \"../Interfaces\";\r\n\r\nexport const getNameStory = (state: IBoardTitleState) => state.board.title\r\nexport const getSubscribedState = (state: ISubscribedState) => state.board.subscribed\r\n","import React, {FC} from \"react\";\r\nimport InputNameField from \"./InputNameField\";\r\nimport {taskNameApi} from \"../../api/task-name-api\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getNameStory, getSubscribedState} from \"../../selectors/boardSelecors\";\r\nimport {INameStory} from \"../../Interfaces\";\r\n\r\nconst InputNameFieldContainer:FC = () => {\r\n    const nameStory: string = useSelector(getNameStory)\r\n    const subscribedState: boolean = useSelector(getSubscribedState)\r\n\r\n    const setNameStory = (message: string) => {\r\n        const nameStory: INameStory  = {\r\n            title: message,\r\n        }\r\n\r\n        taskNameApi.sendMessage(nameStory)\r\n    }\r\n\r\n    return <InputNameField setNameStory={setNameStory} nameStory={nameStory} subscribedState={subscribedState} />\r\n}\r\n\r\nexport default InputNameFieldContainer;","import React, {FC} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport InputNameFieldContainer from \"../InputNameField\";\r\n\r\nconst useStyles = makeStyles({\r\n    board: {\r\n        height: '100%',\r\n        padding: 16\r\n    },\r\n    header: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    middle: {\r\n\r\n    },\r\n    footer: {\r\n\r\n    }\r\n});\r\n\r\nconst PokerBoard:FC = () => {\r\n    const styles = useStyles();\r\n\r\n    return <div className={styles.board}>\r\n        <header className={styles.header}>\r\n            <InputNameFieldContainer />\r\n        </header>\r\n        <div className={styles.middle}>middle</div>\r\n        <footer className={styles.footer}>footer</footer>\r\n    </div>\r\n}\r\n\r\nexport default PokerBoard;","export const GET_NAME_STORY = 'GET_NAME_STORY';\r\nexport const SET_SUBSCRIBE_STATE = 'SET_SUBSCRIBE_STATE';","import {INameStory} from \"../../Interfaces\";\r\nimport {GET_NAME_STORY, SET_SUBSCRIBE_STATE} from \"../../Constants/boardConstants\";\r\n\r\nexport const getNameStory = (data: INameStory)  => ({\r\n    type: GET_NAME_STORY,\r\n    payload: data\r\n});\r\n\r\nexport const setSubscribedState = () => ({\r\n    type: SET_SUBSCRIBE_STATE,\r\n    payload: true\r\n});","import {IBoardState, INameStory, IGetNameStoryAction, ISubscribedAction, ISubscribed} from \"../../Interfaces\";\r\nimport {GET_NAME_STORY, SET_SUBSCRIBE_STATE} from \"../../Constants/boardConstants\";\r\nimport {taskNameApi} from \"../../api/task-name-api\";\r\nimport {getNameStory, setSubscribedState} from \"../actions/boardActions\";\r\n\r\nconst initialState: IBoardState = {\r\n    title: '',\r\n    subscribed: false,\r\n}\r\n\r\ntype ActionTypes = IGetNameStoryAction | ISubscribedAction;\r\n\r\nexport const boardReducer = (state: IBoardState = initialState, action: ActionTypes): IBoardState => {\r\n    switch (action.type) {\r\n        case GET_NAME_STORY:\r\n            return {\r\n                ...state,\r\n                title: action.payload.title,\r\n            }\r\n        case SET_SUBSCRIBE_STATE:\r\n            return {\r\n                ...state,\r\n                subscribed: !!action.payload,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const subscribe = () => async (dispatch: (arg: { type: string; payload: any; }) => void) => {\r\n    taskNameApi.onSubscribe((data: INameStory) => dispatch(getNameStory(data)), () => dispatch(setSubscribedState()))\r\n}","import React, {FC, useEffect} from \"react\";\r\nimport PokerBoard from \"./PokerBoard\";\r\nimport {subscribe} from \"../../Redux/reducers/boardReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst PokerBoardContainer:FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(subscribe())\r\n    }, [])\r\n\r\n    return <PokerBoard />\r\n}\r\n\r\nexport default PokerBoardContainer;","import * as React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n// import Chat from \"./Components/Chat\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport PokerBoardContainer from \"./Components/PokerBoard\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        minHeight: '100vh'\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <PokerBoardContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import { createMuiTheme } from '@material-ui/core/styles';\nimport { red } from '@material-ui/core/colors';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#f5f5f5',\n    },\n  },\n});\n\nexport default theme;\n","export const GET_MESSAGE = 'GET_MESSAGE';","import {IChatState, IAllMessages, IAddMessageAction} from \"../../Interfaces\";\r\nimport {GET_MESSAGE} from \"../../Constants/ChatConstants\";\r\nimport {chatApi} from \"../../api/chat-api\";\r\nimport {getMessage} from \"../actions/chatActions\";\r\n\r\nconst initialState: IChatState = {\r\n    allMessages: []\r\n}\r\n\r\nexport const chatReducer = (state: IChatState = initialState, action: IAddMessageAction): IChatState => {\r\n    switch (action.type) {\r\n        case GET_MESSAGE:\r\n            return {\r\n                allMessages: [...state.allMessages, action.payload]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const starChatting = () => async (dispatch: (arg: { type: string; payload: IAllMessages; }) => void) => {\r\n    chatApi.onSubscribe((data: IAllMessages) => dispatch(getMessage(data)))\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {chatReducer} from './chatReducer';\r\nimport {boardReducer} from './boardReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    chat: chatReducer,\r\n    board: boardReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import * as React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport StyledEngineProvider from '@material-ui/core/StyledEngineProvider';\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport App from './App';\r\nimport theme from './theme';\r\nimport {Provider} from 'react-redux';\r\nimport store from '../src/Redux/reducers/rootReducer';\r\n\r\nReactDOM.render(\r\n    <StyledEngineProvider injectFirst>\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </ThemeProvider>\r\n    </StyledEngineProvider>,\r\n    document.querySelector('#root'),\r\n);"],"sourceRoot":""}